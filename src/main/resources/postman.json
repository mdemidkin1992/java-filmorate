{
  "info": {
    "_postman_id": "d903d89c-f953-459d-8e49-c271ca210324",
    "name": "sprint12/add-search",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "2036415"
  },
  "item": [
    {
      "name": "users",
      "item": [
        {
          "name": "User create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"mail@mail.ru\"').to.eql('mail@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Nick Name\"').to.eql('Nick Name');\r",
                  "});\r",
                  "pm.test(\"Test user 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('login');\r",
                  "    pm.expect(jsonData.login, '\"login\" field must be \"dolore\"').to.eql('dolore');    \r",
                  "});\r",
                  "pm.test(\"Test user 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('birthday');\r",
                  "    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1946-08-20\"').to.eql('1946-08-20');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"dolore\",\n  \"name\": \"Nick Name\",\n  \"email\": \"mail@mail.ru\",\n  \"birthday\": \"1946-08-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User create Fail login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"email\": \"yandex@mail.ru\",\n  \"birthday\": \"2446-08-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User create Fail email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"\",\n  \"email\": \"mail.ru\",\n  \"birthday\": \"1980-08-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User create Fail birthday",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"dolore\",\n  \"name\": \"\",\n  \"email\": \"test@mail.ru\",\n  \"birthday\": \"2446-08-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has user update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"mail@yandex.ru\"').to.eql('mail@yandex.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"est adipisicing\"').to.eql('est adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test user 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('login');\r",
                  "    pm.expect(jsonData.login, '\"login\" field must be \"doloreUpdate\"').to.eql('doloreUpdate');    \r",
                  "});\r",
                  "pm.test(\"Test user 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('birthday');\r",
                  "    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-09-20\"').to.eql('1976-09-20');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"doloreUpdate\",\n  \"name\": \"est adipisicing\",\n  \"id\": 1,\n  \"email\": \"mail@yandex.ru\",\n  \"birthday\": \"1976-09-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User update unknown",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"doloreUpdate\",\n  \"name\": \"est adipisicing\",\n  \"id\": 9999,\n  \"email\": \"mail@yandex.ru\",\n  \"birthday\": \"1976-09-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User get All",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list user response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"mail@yandex.ru\"').to.eql('mail@yandex.ru');\r",
                  "});\r",
                  "pm.test(\"Test user[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"est adipisicing\"').to.eql('est adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test user[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"doloreUpdate\"').to.eql('doloreUpdate');    \r",
                  "});\r",
                  "pm.test(\"Test user[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"1976-09-20\"').to.eql('1976-09-20');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "user",
      "item": [
        {
          "name": "Friend Create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test user 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('login');\r",
                  "    pm.expect(jsonData.login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
                  "});\r",
                  "pm.test(\"Test user 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('birthday');\r",
                  "    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"friend\",\n  \"name\": \"friend adipisicing\",\n  \"email\": \"friend@mail.ru\",\n  \"birthday\": \"1976-08-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Common Friend Create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has user create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test user 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('login');\r",
                  "    pm.expect(jsonData.login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test user 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('birthday');\r",
                  "    pm.expect(jsonData.birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"login\": \"common\",\n  \"name\": \"\",\n  \"email\": \"friend@common.ru\",\n  \"birthday\": \"2000-08-20\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "User get by id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has user get response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"mail@yandex.ru\"').to.eql('mail@yandex.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"est adipisicing\"').to.eql('est adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test user 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('login');\r",
                  "    pm.expect(jsonData.login, '\"login\" field must be \"doloreUpdate\"').to.eql('doloreUpdate');    \r",
                  "});\r",
                  "pm.test(\"Test user 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('birthday');\r",
                  "    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-09-20\"').to.eql('1976-09-20');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User get unknown with id=9999",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "9999",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Friend get user id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has user get response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test user 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test user 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('email');\r",
                  "    pm.expect(jsonData.email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test user 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test user 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('login');\r",
                  "    pm.expect(jsonData.login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
                  "});\r",
                  "pm.test(\"Test user 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('birthday');\r",
                  "    pm.expect(jsonData.birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "friend",
      "item": [
        {
          "name": "User get friends common empty",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list user response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be empty').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                "common",
                ":otherId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "otherId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 add friend id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/:friendId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "friendId",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 add friend unknown id=-1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/:friendId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "friendId",
                  "value": "-1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 get friends",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=2 get friends",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Empty Common friends to user id=1 with user id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list common user response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be empty').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                "common",
                ":otherId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "otherId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 add  friend id=3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/:friendId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "friendId",
                  "value": "3",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 get 2 friends",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@mail.ru\"').to.eql('friend@mail.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"friend adipisicing\"').to.eql('friend adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"friend\"').to.eql('friend');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"1976-08-20\"').to.eql('1976-08-20');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test friend[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test friend[1] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('email');\r",
                  "    pm.expect(jsonData[1].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test friend[1] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('login');\r",
                  "    pm.expect(jsonData[1].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test friend[1] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[1].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=2 add  friend id=3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/:friendId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                },
                {
                  "key": "friendId",
                  "value": "3",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=2 get 1 friend",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Common friend to user id=1 with user id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list common friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                "common",
                ":otherId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "otherId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 remove friend id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/:friendId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                ":friendId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "friendId",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 get common with user id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list common friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                "common",
                ":otherId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "otherId",
                  "value": "2"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=2 get common with user id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list common friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends/common/:otherId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends",
                "common",
                ":otherId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                },
                {
                  "key": "otherId",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "User id=1 get 1 friend",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list friend response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test friend[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'email' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('email');\r",
                  "    pm.expect(jsonData[0].email, '\"email\" must be \"friend@common.ru\"').to.eql('friend@common.ru');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"common\"').to.eql('common');\r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'login' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('login');\r",
                  "    pm.expect(jsonData[0].login, '\"login\" field must be \"common\"').to.eql('common');    \r",
                  "});\r",
                  "pm.test(\"Test friend[0] 'birthday' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('birthday');\r",
                  "    pm.expect(jsonData[0].birthday, '\"birthday\" field must be \"2000-08-20\"').to.eql('2000-08-20');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:id/friends",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":id",
                "friends"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "films",
      "item": [
        {
          "name": "Film get All",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film id=1 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has film create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"nisi eiusmod\"').to.eql('nisi eiusmod');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"adipisicing\"').to.eql('adipisicing');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1967-03-25\"').to.eql('1967-03-25');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(100);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 1').to.eql(1);    \r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"nisi eiusmod\",\n  \"description\": \"adipisicing\",\n  \"releaseDate\": \"1967-03-25\",\n  \"duration\": 100,\n  \"mpa\": { \"id\": 1}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film create Fail name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"\",\n  \"description\": \"Description\",\n  \"releaseDate\": \"1900-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film create Fail description",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Film name\",\n  \"description\": \"Пятеро друзей ( комик-группа «Шарло»), приезжают в город Бризуль. Здесь они хотят разыскать господина Огюста Куглова, который задолжал им деньги, а именно 20 миллионов. о Куглов, который за время «своего отсутствия», стал кандидатом Коломбани.\",\n    \"releaseDate\": \"1900-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film create Fail releaseDate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Name\",\n  \"description\": \"Description\",\n  \"releaseDate\": \"1890-03-25\",\n  \"duration\": 200,\n  \"mpa\": { \"id\": 1}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film create Fail duration",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Name\",\n  \"description\": \"Descrition\",\n  \"releaseDate\": \"1980-03-25\",\n  \"duration\": -200,\n  \"mpa\": { \"id\": 1}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has film update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 2}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film update unknown",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
                  "});\r",
                  "pm.test(\"Has error response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 9999,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 1}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film get All",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"PG\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film get Popular",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list popular film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"PG\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/popular",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "popular"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "film",
      "item": [
        {
          "name": "Film id=2 create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has film create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film id=1 get",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 2').to.eql(2);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"PG\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film id=9999 get not found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "9999",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "like",
      "item": [
        {
          "name": "Film id=2 add Like from user id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id/like/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id",
                "like",
                ":userId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                },
                {
                  "key": "userId",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film most popular film",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list popular film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/popular?count=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "popular"
              ],
              "query": [
                {
                  "key": "count",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film id=2 add Like from user id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id/like/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id",
                "like",
                ":userId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                },
                {
                  "key": "userId",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film get all popular film",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list popular film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/popular",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "popular"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Film id=2 remove Like from user id=-2  not found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id/like/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id",
                "like",
                ":userId"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                },
                {
                  "key": "userId",
                  "value": "-2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "MPA",
      "item": [
        {
          "name": "Mpa id=1 get",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get MPA response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test MPA 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test MPA 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"G\"').to.eql('G');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/mpa/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "mpa",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Mpa  id=9999 get not found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/mpa/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "mpa",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "9999",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Mpa  get All",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list MPA response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test MPA[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test MPA[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"G\"').to.eql('G');\r",
                  "});\r",
                  "pm.test(\"Test MPA[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test MPA[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"PG\"').to.eql('PG');\r",
                  "});\r",
                  "pm.test(\"Test MPA[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test MPA[2] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('name');\r",
                  "    pm.expect(jsonData[2].name, '\"name\" must be \"PG-13\"').to.eql('PG-13');\r",
                  "});\r",
                  "pm.test(\"Test MPA[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test MPA[3] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('name');\r",
                  "    pm.expect(jsonData[3].name, '\"name\" must be \"R\"').to.eql('R');\r",
                  "});\r",
                  "pm.test(\"Test MPA[4] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('id');\r",
                  "    pm.expect(jsonData[4].id, '\"id\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test MPA[4] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('name');\r",
                  "    pm.expect(jsonData[4].name, '\"name\" must be \"NC-17\"').to.eql('NC-17');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/mpa",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "mpa"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "Genre",
      "item": [
        {
          "name": "Genre id=1 get",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get genre response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test genre 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test genre 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/genres/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "genres",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Genre get unknown",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/genres/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "genres",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "9999",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Genre All",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list genre response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test genre[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test genre[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test genre[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test genre[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"Драма\"').to.eql('Драма');\r",
                  "});\r",
                  "pm.test(\"Test genre[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test genre[2] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('name');\r",
                  "    pm.expect(jsonData[2].name, '\"name\" must be \"Мультфильм\"').to.eql('Мультфильм');\r",
                  "});\r",
                  "pm.test(\"Test genre[3] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('id');\r",
                  "    pm.expect(jsonData[3].id, '\"id\" must be 4').to.eql(4);\r",
                  "});\r",
                  "pm.test(\"Test genre[3] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[3]).to.have.property('name');\r",
                  "    pm.expect(jsonData[3].name, '\"name\" must be \"Триллер\"').to.eql('Триллер');\r",
                  "});\r",
                  "pm.test(\"Test genre[4] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('id');\r",
                  "    pm.expect(jsonData[4].id, '\"id\" must be 5').to.eql(5);\r",
                  "});\r",
                  "pm.test(\"Test genre[4] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[4]).to.have.property('name');\r",
                  "    pm.expect(jsonData[4].name, '\"name\" must be \"Документальный\"').to.eql('Документальный');\r",
                  "});\r",
                  "pm.test(\"Test genre[5] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[5]).to.have.property('id');\r",
                  "    pm.expect(jsonData[5].id, '\"id\" must be 6').to.eql(6);\r",
                  "});\r",
                  "pm.test(\"Test genre[5] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[5]).to.have.property('name');\r",
                  "    pm.expect(jsonData[5].name, '\"name\" must be \"Боевик\"').to.eql('Боевик');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/genres",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "genres"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 update genre",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has film update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 2').to.eql(2);    \r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"genres\": [{ \"id\": 2}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 get with genre",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 2').to.eql(2);    \r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Драма\"').to.eql('Драма');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film All with genre",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].genres[0].id, '\"genres[0].id\" field must be 2').to.eql(2);    \r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].genres[0].name, '\"genres[0].name\" field must be \"Драма\"').to.eql('Драма');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[1].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[1].duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[1] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[1].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[1].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[1].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 update remove  genre",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has film update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genre').to.eql(0);\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"genres\": []\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 get without genre",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    if (jsonData.genres != null) {\r",
                  "        pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genre').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=2 genres update",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has film create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 3 genres').to.eql(3);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
                  "    pm.expect(jsonData.genres[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[2].id, '\"genres[2].id\" field must be 3').to.eql(3);\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 2,\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}, { \"id\": 2}, { \"id\": 3}]\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=2  get with genres",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);\r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 3 genres').to.eql(3);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
                  "    pm.expect(jsonData.genres[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[1].name, '\"genres[1].name\" field must be \"Драма\"').to.eql('Драма');\r",
                  "    pm.expect(jsonData.genres[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[2].id, '\"genres[2].id\" field must be 3').to.eql(3);\r",
                  "    pm.expect(jsonData.genres[2]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[2].name, '\"genres[2].name\" field must be \"Мультфильм\"').to.eql('Мультфильм');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=2  genres update with duplicate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has film create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 2 genres').to.eql(2);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
                  "});\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 2,\n  \"name\": \"New film\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"New film about friends\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}, { \"id\": 2}, { \"id\": 1}]\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=2  get with genre  without duplicate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);\r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 2 genres').to.eql(2);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "    pm.expect(jsonData.genres[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
                  "    pm.expect(jsonData.genres[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[1].name, '\"genres[1].name\" field must be \"Драма\"').to.eql('Драма');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "add-director",
      "item": [
        {
          "name": "Get all directors before create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list directors response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get director 1 before create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create Director id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has director create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test director 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test director 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Director\"').to.eql('Director');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 10,\n  \"name\": \"Director\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get director id=1 after create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Get director response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test director 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test director 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Director\"').to.eql('Director');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create director Fail name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 500 or 400\", function () {\r",
                  "     pm.expect(pm.response.code).to.be.oneOf([500,400]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 10,\n  \"name\": \" \"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update Director id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Has director update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test director 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test director 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Director updated\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Update unknown director id=10",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 10,\n  \"name\": \"Director updated\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get unknown director 10",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "10",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get all directors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list directors response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test director[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test director[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 add director id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has film update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"2089-04-17\"').to.eql('2089-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genre').to.eql(0);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"2089-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"directors\": [{ \"id\": 1}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=3  create with director id=1",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has film create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New film with director\",\n  \"releaseDate\": \"1999-04-30\",\n  \"description\": \"Film with director\",\n  \"duration\": 120,\n  \"mpa\": { \"id\": 3},\n  \"genres\": [{ \"id\": 1}],\n  \"directors\": [{ \"id\": 1}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get all films with directors",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"2089-04-17\"').to.eql('2089-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData[0].genres != null) {\r",
                  "        pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[0].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Test film[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"New film\"').to.eql('New film');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"New film about friends\"').to.eql('New film about friends');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[1].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[1].duration, '\"duration\" field must be 100').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);\r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[1].genres.length, '\"genres\" field must be have 2 genres').to.eql(2);\r",
                  "    pm.expect(jsonData[1].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[1].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "    pm.expect(jsonData[1].genres[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].genres[1].id, '\"genres[1].id\" field must be 2').to.eql(2);\r",
                  "    pm.expect(jsonData[1].genres[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].genres[1].name, '\"genres[1].name\" field must be \"Драма\"').to.eql('Драма');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[1].directors.length, '\"directors\" field must be have 0 director').to.eql(0);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[2] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film[2] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('name');\r",
                  "    pm.expect(jsonData[2].name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[2] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('description');\r",
                  "    pm.expect(jsonData[2].description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[2] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[2].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[2] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[2].duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film[2] 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[2].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData[2].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[2].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "pm.test(\"Test film[2] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[2].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[2].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[2].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[2].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test film[2] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[2]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[2].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[2].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[2].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[2].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[2].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get films with director id=1 sort by year",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list film with director response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[0].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[1].releaseDate, '\"releaseDate\" field must be \"2089-04-17\"').to.eql('2089-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[1].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData[1].genres != null) {\r",
                  "        pm.expect(jsonData[1].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[1].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[1].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[1].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/director/:directorId?sortBy=year",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "director",
                ":directorId"
              ],
              "query": [
                {
                  "key": "sortBy",
                  "value": "year"
                }
              ],
              "variable": [
                {
                  "key": "directorId",
                  "value": "1"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get films with director id=1 sort by likes",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test list film with director response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"2089-04-17\"').to.eql('2089-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData[0].genres != null) {\r",
                  "        pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[0].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Test film[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[1].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[1].duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[1].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[1].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[1].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[1].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[1].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[1].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/director/:directorId?sortBy=likes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "director",
                ":directorId"
              ],
              "query": [
                {
                  "key": "sortBy",
                  "value": "likes"
                }
              ],
              "variable": [
                {
                  "key": "directorId",
                  "value": "1"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get film id=3 with director",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData.genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData.genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData.directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "3",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 update remove director",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Test Film update remove director\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.id).to.eql(1);\r",
                  "    pm.expect(jsonData.name).to.eql('Film Updated');\r",
                  "    pm.expect(jsonData.description).to.eql('New film update decription');    \r",
                  "    pm.expect(jsonData.releaseDate).to.eql('1989-04-17');\r",
                  "    pm.expect(jsonData.duration).to.eql(190);\r",
                  "    pm.expect(jsonData.mpa.id).to.eql(5);\r",
                  "    if (jsonData.genres != null) {\r",
                  "        pm.expect(jsonData.genres.length).to.eql(0);\r",
                  "    }\r",
                  "    if (jsonData.directors != null) {\r",
                  "        pm.expect(jsonData.directors.length).to.eql(0);\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5}\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get film id=1 without director",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData.genres != null) {\r",
                  "        pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 0 director').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Create temp Director id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
                  "});\r",
                  "pm.test(\"Has director create response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test director 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test director 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Temp Director\"').to.eql('Temp Director');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 11,\n  \"name\": \"Temp Director\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/directors",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"login\": \"dolore ullamco\",\n  \"name\": \"est adipisicing\",\n  \"id\": -35528664,\n  \"email\": \"Lorem mollit nisi anim\",\n  \"birthday\": \"1946-08-20\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/users",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get director id=2 after create",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "pm.test(\"Has director response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test director 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
                  "});\r",
                  "pm.test(\"Test director 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Temp Director\"').to.eql('Temp Director');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Film id=1 add temp director id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Has film update response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('genres');\r",
                  "    pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genre').to.eql(0);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.directors[0].id, '\"directors[0].id\" field must be 2').to.eql(2);    \r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": 1,\n  \"name\": \"Film Updated\",\n  \"releaseDate\": \"1989-04-17\",\n  \"description\": \"New film update decription\",\n  \"duration\": 190,\n  \"rate\": 4,\n  \"mpa\": { \"id\": 5},\n  \"directors\": [{ \"id\": 2}]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/films",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films"
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": 76030770,\n  \"name\": \"labore nulla\",\n  \"releaseDate\": \"1979-04-17\",\n  \"description\": \"Duis in consequat esse\",\n  \"duration\": 47277389,\n  \"rate\": 44519530\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get film id=1 with temp director id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData.genres != null) {\r",
                  "        pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData.directors[0].id, '\"directors[0].id\" field must be 2').to.eql(2);    \r",
                  "    pm.expect(jsonData.directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData.directors[0].name, '\"directors[0].name\" field must be \"Temp Director\"').to.eql('Temp Director');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Delete director id=2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 204\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get director id=2 after delete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/directors/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "directors",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "2",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/users/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "users",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get film id=1 with deleted director",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "pm.test(\"Test film 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('id');\r",
                  "    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('name');\r",
                  "    pm.expect(jsonData.name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('description');\r",
                  "    pm.expect(jsonData.description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData.releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('duration');\r",
                  "    pm.expect(jsonData.duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('mpa');\r",
                  "    pm.expect(jsonData.mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData.mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData.mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData.mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData.genres != null) {\r",
                  "        pm.expect(jsonData.genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property('directors');\r",
                  "    pm.expect(jsonData.directors.length, '\"directors\" field must be have 0 director').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Get films with deleted director",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {\r",
                  "    pm.response.to.have.status(404);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/director/:director?sortBy=likes",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "director",
                ":director"
              ],
              "query": [
                {
                  "key": "sortBy",
                  "value": "likes"
                }
              ],
              "variable": [
                {
                  "key": "director",
                  "value": "2"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    },
    {
      "name": "add-search",
      "item": [
        {
          "name": "Film id=3 with director add Like",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200,204]);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/:filmId/like/:userId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                ":filmId",
                "like",
                ":userId"
              ],
              "variable": [
                {
                  "key": "filmId",
                  "value": "3"
                },
                {
                  "key": "userId",
                  "value": "1",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id/like/:userId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id",
                    "like",
                    ":userId"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    },
                    {
                      "key": "userId",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id/like/:userId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id",
                    "like",
                    ":userId"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    },
                    {
                      "key": "userId",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id/like/:userId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id",
                    "like",
                    ":userId"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    },
                    {
                      "key": "userId",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films/:id/like/:userId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films",
                    ":id",
                    "like",
                    ":userId"
                  ],
                  "variable": [
                    {
                      "key": "id",
                      "value": "-29029902",
                      "description": "(Required) "
                    },
                    {
                      "key": "userId",
                      "value": "-29029902",
                      "description": "(Required) "
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Search films anyway by upDatE",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test search film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[0].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Test film[1] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('description');\r",
                  "    pm.expect(jsonData[1].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[1].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[1].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[1].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData[1].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[1].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film[1] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData[1].genres != null) {\r",
                  "        pm.expect(jsonData[1].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film[1] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[1]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[1].directors.length, '\"directors\" field must be have 0 director').to.eql(0);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/search?query=upDatE&by=title,director",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "upDatE"
                },
                {
                  "key": "by",
                  "value": "title,director"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Search films anyway empty",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test search film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 0').to.eql(0);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/search?query=не найти&by=director,title",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "не найти"
                },
                {
                  "key": "by",
                  "value": "director,title"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Search films by title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test search film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 1').to.eql(1);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"Film Updated\"').to.eql('Film Updated');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"New film update decription\"').to.eql('New film update decription');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1989-04-17\"').to.eql('1989-04-17');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 190').to.eql(190);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 5').to.eql(5);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"NC-17\"').to.eql(\"NC-17\");    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    if (jsonData[0].genres != null) {\r",
                  "        pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 0 genres').to.eql(0);\r",
                  "    }\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[0].directors.length, '\"directors\" field must be have 0 director').to.eql(0);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/search?query=UPdat&by=title",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "UPdat"
                },
                {
                  "key": "by",
                  "value": "title"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        },
        {
          "name": "Search films by director",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.be.ok;\r",
                  "});\r",
                  "pm.test(\"Test search film response\", function () {\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Test film[0] 'id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].id, '\"id\" must be 3').to.eql(3);\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'name' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].name, '\"name\" must be \"New film with director\"').to.eql('New film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'description' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('description');\r",
                  "    pm.expect(jsonData[0].description, '\"description\" must be \"Film with director\"').to.eql('Film with director');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'releaseDate' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('releaseDate');\r",
                  "    pm.expect(jsonData[0].releaseDate, '\"releaseDate\" field must be \"1999-04-30\"').to.eql('1999-04-30');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'duration' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('duration');\r",
                  "    pm.expect(jsonData[0].duration, '\"duration\" field must be 120').to.eql(120);    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'mpa.id' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('mpa');\r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].mpa.id, '\"mpa.id\" field must be 3').to.eql(3);    \r",
                  "    pm.expect(jsonData[0].mpa).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].mpa.name, '\"mpa.name\" field must be \"PG-13\"').to.eql(\"PG-13\");    \r",
                  "});\r",
                  "pm.test(\"Test film[0] 'genres' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('genres');\r",
                  "    pm.expect(jsonData[0].genres.length, '\"genres\" field must be have 1 genre').to.eql(1);\r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].genres[0].id, '\"genres[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].genres[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].genres[0].name, '\"genres[0].name\" field must be \"Комедия\"').to.eql('Комедия');\r",
                  "});\r",
                  "pm.test(\"Test film[0] 'directors' field\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[0]).to.have.property('directors');\r",
                  "    pm.expect(jsonData[0].directors.length, '\"directors\" field must be have 1 director').to.eql(1);\r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('id');\r",
                  "    pm.expect(jsonData[0].directors[0].id, '\"directors[0].id\" field must be 1').to.eql(1);    \r",
                  "    pm.expect(jsonData[0].directors[0]).to.have.property('name');\r",
                  "    pm.expect(jsonData[0].directors[0].name, '\"directors[0].name\" field must be \"Director updated\"').to.eql('Director updated');\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "*/*"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/films/search?query=upDATE&by=director",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "films",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "upDATE"
                },
                {
                  "key": "by",
                  "value": "director"
                }
              ]
            }
          },
          "response": [
            {
              "name": "OK",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Conflict",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            },
            {
              "name": "Internal Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/films",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "films"
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "body": ""
            }
          ]
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}